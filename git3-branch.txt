Git分支

分支简介
为了真正理解Git的分支，我们需要回顾一下Git保存数据的方式。

Git保存的不是文件的变化或差异，而是一系列不同时刻的快照。

进行提交操作时，Git会保存一个提交对象(commit object)。
该提交对象会包含一个指向暂存内容快照的指针，还包含作者姓名，邮箱，
提交信息和指向它父对象的指针。
首次提交产生的提交对象没有父对象，普通提交操作产生的提交对象有一个
父对象，而由多个分支合并产生的提交对象有多个父对象。

现在假设有一个工作目录，里面包含了三个将要被暂存和提交的文件。
暂存操作会为每一个文件计算校验和，然后把当前版本的文件快照保存到
Git仓库中(Git使用blob对象来保存它们)，最终将校验和加入到暂存区域
等待提交。
$ git add README test.rb LICENSE
$ git commit -m 'The initial commit of my project'

提交时，Git会先计算每一个子目录(本例中只有根目录)的校验和，然后在
Git仓库中这些校验和保存为树对象。随后，Git便会创建一个提交对象，
它除了包含上面提到的那些信息外，还包含指向这个树对象(项目根目录)
的指针。如此一来，Git就可以在需要的时候重现此次保存的快照。

现在，Git仓库中有5个对象：3个blob对象(保存文件快照)，1个树对象(记录
目录结构和blob对象索引)，以及1个提交对象(包含着指向前述树对象的指针
和所有提交信息)

TODO

可以简单地使用`git log --decorate`查看各个分支当前所指的对象。

$ git log --oneline --decorate --graph --all


rebase：将提交到某一分支上的所有修改都移至另一分支上，就像
“重新播放”一样。
现在，experiment分支和master分支有一个分叉。
$ git checkout experiment
$ git rebase master
它的原理是首先找到这两个分支的最近共同祖先，然后对比当前分支
相对于该祖先的历次提交，提取相应的修改并存为临时文件，然后将当前
分支指向目标基底C3(master),最后以此将之前另存为临时文件的修改
依序应用。

